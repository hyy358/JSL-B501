C51 COMPILER V9.57.0.0   AUDIO                                                             06/09/2022 11:28:17 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE AUDIO
OBJECT MODULE PLACED IN .\Objects\Audio.obj
COMPILER INVOKED BY: D:\keil-c51\C51\BIN\C51.EXE UserSrc\Audio.c LARGE OPTIMIZE(8,SPEED) BROWSE NOINTPROMOTE INCDIR(.\Us
                    -erSrc;.\StcLib;.\UserSrc\ENG) DEBUG OBJECTEXTEND PRINT(.\Listings\Audio.lst) TABS(2) OBJECT(.\Objects\Audio.obj)

line level    source

   1          #include "config.h"
   2          #include "Driver.h"
   3          #include "Audio.h"
   4          #include "stdio.h"
   5          #include "GPIO.h"
   6          #include "UART.h"
   7          #include "SysStatus.h"
   8          
   9          #ifdef MP3_MODULE
              //bool Mp3Busy = true;
              Mp3CmdType Mp3Cmd=
              {
                0x7EFF,
                0x06,
                0x09,
                0x00,
                0x00,
                0x02,
                0xFF0F,
                0xEF,
              };
              
              void Mp3SendCmd(void)
              {
                u8 *pD = (u8 *)&Mp3Cmd;
                u8 i;
                Mp3Cmd.Chk = 0;
                for(i=1;i<7;i++)
                {
                  Mp3Cmd.Chk += pD[i];
                }
                Mp3Cmd.Chk = ~Mp3Cmd.Chk;
                Mp3Cmd.Chk++;
                printf("Mp3UartTx: ");
                for(i=0;i<sizeof(Mp3Cmd);i++)
                {
                  printf("%b02X ",pD[i]);
                }
                printf("\r\n");
                Uart4SendBuf(pD,sizeof(Mp3Cmd));
              }
              
              void MP3_SetMode(void)
              {
                Mp3Cmd.Len = 6;
                Mp3Cmd.Cmd = MP3_CMD_SETMODE;
                Mp3Cmd.Para1 = 0;
                Mp3Cmd.Para2 = 2;
                Mp3SendCmd();
              }
              void MP3_SetVolum(void)
              {
                Mp3Cmd.Len = 6;
                Mp3Cmd.Cmd = MP3_CMD_SETVOLUM;
C51 COMPILER V9.57.0.0   AUDIO                                                             06/09/2022 11:28:17 PAGE 2   

                Mp3Cmd.Para1 = 0;
                Mp3Cmd.Para2 = 30;
                Mp3SendCmd();
              }
              
              void MP3_StartPlay(u16 idx)
              {
              //  if(Mp3Busy)
              //  {
              //    return;
              //  }
                Mp3Cmd.Len = 6;
                Mp3Cmd.Cmd = MP3_CMD_PLAY;
                Mp3Cmd.Para1 = (idx>>8)&0xFF;
                Mp3Cmd.Para2 = idx&0xFF;
                PA_PWR_L;
                Mp3SendCmd();
              //  Mp3Busy = true;
              }
              
              void Mp3UartRx(u8 * buf)
              {
                u8 i;
                u16 Chk = 0;
                Mp3CmdType *pTmp = (Mp3CmdType*)buf;
                printf("Mp3UartRx:");
                for(i=0;i<pTmp->Len+4;i++)
                {
                  printf("%b02X ",buf[i]);
                }
                printf("\r\n");
                for(i=1;i<pTmp->Len+1;i++)
                {
                  Chk += buf[i];
                }
                Chk = ~Chk;
                Chk++;
                if((pTmp->St == 0x7EFF) && (pTmp->End == 0xEF) && (Chk == pTmp->Chk))
                {
                  switch(pTmp->Cmd)
                  {
                    case MP3_CMD_PWRON:
                      if(pTmp->Para2 != 2)
                      {
                        MP3_SetMode();
                      }
                      else
                      {
                        //Mp3Busy = false;
                        MP3_SetVolum();
                      }
                      break;
                    case MP3_CMD_RE_STOP:
                      if(((IdleTime > 0) && (IdleTime <= 3)) || ((SysStatus != SYS_TALK) && (SysStatus != SYS_CALL)))
                      {
                        PA_PWR_H;
                      }
                      //Mp3Busy = false;
                      break;
                    case MP3_CMD_RE_ERR:
                      PA_PWR_H;
                      //Mp3Busy = false;
C51 COMPILER V9.57.0.0   AUDIO                                                             06/09/2022 11:28:17 PAGE 3   

                      break;
                  }
                }
              }
              #elif defined PWM_AUDIO
 122          
 123          #include "spi.h"
 124          
 125          void SPI_config(void)
 126          {
 127   1        SPI_InitTypeDef   SPI_InitStructure;
 128   1        SPI_InitStructure.SPI_Module    = ENABLE;           //SPI启动    ENABLE, DISABLE
 129   1        SPI_InitStructure.SPI_SSIG      = DISABLE;          //片选位     ENABLE, DISABLE
 130   1        SPI_InitStructure.SPI_FirstBit  = SPI_MSB;          //移位方向   SPI_MSB, SPI_LSB
 131   1        SPI_InitStructure.SPI_Mode      = SPI_Mode_Master;    //主从选择   SPI_Mode_Master, SPI_Mode_Slave
 132   1        SPI_InitStructure.SPI_CPOL      = SPI_CPOL_Low;    //时钟相位   SPI_CPOL_High,   SPI_CPOL_Low
 133   1        SPI_InitStructure.SPI_CPHA      = SPI_CPHA_1Edge;   //数据边沿   SPI_CPHA_1Edge,  SPI_CPHA_2Edge
 134   1        SPI_InitStructure.SPI_Interrupt = ENABLE;       //中断允许   ENABLE,DISABLE
 135   1        SPI_InitStructure.SPI_Speed     = SPI_Speed_4;      //SPI速度    SPI_Speed_4, SPI_Speed_16, SPI_Speed_64, S
             -PI_Speed_128
 136   1        SPI_InitStructure.SPI_IoUse     = SPI_P54_P40_P41_P43; //IO口切换   SPI_P12_P13_P14_P15, SPI_P22_P23_P24_
             -P25, SPI_P54_P40_P41_P43, SPI_P35_P34_P33_P32
 137   1        SPI_Init(&SPI_InitStructure);
 138   1        
 139   1        SPI_FLASH_CS_DISEN;
 140   1      }
 141          
 142          #define PWMC (*(unsigned int volatile xdata *)0xfff0)
 143          #define PWMCKS (*(unsigned char volatile xdata *)0xfff2)
 144          #define PWM0T1 (*(unsigned int volatile xdata *)0xff00)
 145          #define PWM0T2 (*(unsigned int volatile xdata *)0xff02)
 146          #define PWM0CR (*(unsigned char volatile xdata *)0xff04)
 147          sfr PWMCR = 0xfe;
 148          #define PWM_CYCLE 0x00FF
 149          #define PWM_STOP() {PWMCR = 0;}
 150          #define PWM_START() {PWMCR = 0x80;}
 151          void PWM_config(void)
 152          {
 153   1        EAXSFR();
 154   1        PWMCKS = 0x00;
 155   1        PWMC = PWM_CYCLE;
 156   1        PWM0T1 = 0;
 157   1        PWM0T2 = (PWM_CYCLE/2);
 158   1        PWM0CR = 0x90;
 159   1        EAXRAM();
 160   1        PWM_STOP();
 161   1      }
 162          
 163          #define WAV_BUFLEN 1024
 164          uint8_t WavBuf[2][WAV_BUFLEN];
 165          static uint16_t PlyIdx = 0;
 166          static uint8_t Midx = 0;
 167          uint16_t WavBufLen[2] = {0,0};
 168          uint32_t WavFileAddr = 0;
 169          uint32_t WavFileLen = 0;
 170          uint32_t WavReadIdx = 0;
 171          bool WavNeedRead = false;
 172          bool AudioPlaying = false;
 173          
 174          //WavFileType WavFile[MP3_Last-1]=
 175          //{
 176          //{0,51170},
C51 COMPILER V9.57.0.0   AUDIO                                                             06/09/2022 11:28:17 PAGE 4   

 177          //{51170,77254},
 178          //{128424,133702},
 179          //{262126,72646},
 180          //{334772,42112},
 181          //{376884,51766},
 182          //{428650,64582},
 183          //{493232,67476},
 184          //{560708,56364},
 185          //{617072,210944},
 186          //};
 187          WavFileType WavFile[MP3_Last-1]=
 188          {
 189          {0,68012},
 190          {68012,53036},
 191          {121048,46124},
 192          {167172,57644},
 193          {224816,58796},
 194          {283612,50732},
 195          {334344,58796},
 196          {393140,55340},
 197          {448480,42668},
 198          {491148,192386},
 199          {683534,34604},
 200          {718138,36908},
 201          {755046,57644},
 202          {812690,24236},
 203          {836926,62252},
 204          {899178,73772},
 205          {972950,12842},
 206          };
 207          void WavReadTask(void)
 208          {
 209   1        uint8_t midx;
 210   1      //  uint16_t i,tmp;
 211   1        if(WavNeedRead)
 212   1        {
 213   2          WavNeedRead = false;
 214   2          midx = 1-Midx;
 215   2          if((WavFileLen == 0) || (WavReadIdx == WavFileLen))
 216   2          {
 217   3            MP3_Stop();
 218   3            return;
 219   3          }
 220   2          if((WavFileLen-WavReadIdx) >  WAV_BUFLEN)
 221   2          {
 222   3            WavBufLen[midx] = WAV_BUFLEN;
 223   3            WavReadIdx += WAV_BUFLEN;
 224   3          }
 225   2          else
 226   2          {
 227   3            WavBufLen[midx] = WavFileLen-WavReadIdx;
 228   3            WavFileLen = 0;
 229   3            if(((IdleTime > 0) && (IdleTime <= 3)) || ((SysStatus != SYS_TALK) && (SysStatus != SYS_CALL)))
 230   3            {
 231   4              PA_PWR_H;
 232   4            }
 233   3            
 234   3          }
 235   2          SPI_Flash_Read(WavBuf[midx],WavFileAddr+WavReadIdx,WavBufLen[midx]);
 236   2      //    for(i=0;i<WavBufLen[midx];i++)
 237   2      //    {
 238   2      //      tmp = WavBuf[midx][i];
C51 COMPILER V9.57.0.0   AUDIO                                                             06/09/2022 11:28:17 PAGE 5   

 239   2      //      WavBuf[midx][i] = (tmp*SysPara.TalkVolum)/5;
 240   2      //    }
 241   2        }
 242   1      }
 243          
 244          void PWMtask(void)
 245          {
 246   1        //uint16_t tmp;
 247   1        if(PlyIdx < WavBufLen[Midx])
 248   1        {
 249   2          EAXSFR();
 250   2      //    tmp = WavBuf[Midx][PlyIdx+1];
 251   2      //    tmp <<= 8;
 252   2      //    tmp |= WavBuf[Midx][PlyIdx];
 253   2      //    PlyIdx += 2;
 254   2      //    if(tmp < 0){PlyIdx += 2;return;}
 255   2          PWM0T2 = WavBuf[Midx][PlyIdx++];
 256   2          EAXRAM();
 257   2        }
 258   1        else
 259   1        {
 260   2          PlyIdx = 0;
 261   2          Midx = 1-Midx;
 262   2          WavNeedRead = true;
 263   2        }
 264   1      }
 265          
 266          void MP3_StartPlay(uint8_t idx)
 267          {
 268   1        if(!SysPara.ToneEn)
 269   1        {
 270   2          return;
 271   2        }
 272   1      //  PWM_STOP();
 273   1        Timer4_Stop();
 274   1        PA_PWR_L;
 275   1        delay(500);
 276   1        WavFileAddr = WavFile[idx-1].FileAddr;
 277   1        WavFileLen = WavFile[idx-1].FileLen;
 278   1        
 279   1        PlyIdx = 0;
 280   1        WavReadIdx = 0;
 281   1        WavBufLen[0] = 0;
 282   1        WavBufLen[1] = 0;
 283   1        
 284   1        Midx = 1;
 285   1        WavNeedRead = true;
 286   1        WavReadTask();
 287   1        
 288   1        Midx = 0;
 289   1        WavNeedRead = true;
 290   1        WavReadTask();
 291   1        
 292   1        PWM_START();
 293   1        Timer4_Run();
 294   1        AudioPlaying = true;
 295   1      }
 296          void MP3_Stop(void)
 297          {
 298   1        if(((IdleTime > 0) && (IdleTime <= 3)) || ((SysStatus != SYS_TALK) && (SysStatus != SYS_CALL)))
 299   1        {
 300   2          PA_PWR_H;
C51 COMPILER V9.57.0.0   AUDIO                                                             06/09/2022 11:28:17 PAGE 6   

 301   2        }
 302   1        AudioPlaying = false;
 303   1      //  PWM_STOP();
 304   1        Timer4_Stop();
 305   1      }
 306          #endif
 307          
 308          #ifdef KEY_BEEP
 309          
 310          code BeepFileType WavCode[] = {
 311          {3,{3,2,1}},//OK
 312          {5,{1,0,1,0,1}},//Err
 313          {7,{1,1,1,0,1,0,1}},//Unlock
 314          {3,{1,0,1}},//Call
 315          {1,{1,2}},//Key
 316          };
 317          
 318          u8 BeepPlyIdx = 0xFF;
 319          u8 PlyN = 0;
 320          u8 PwmTimer = 0;
 321          bit KeyBeepO = 0;
 322          void Beep_StartPlay(u8 idx)
 323          {
 324   1        switch(idx)
 325   1        {
 326   2          case MP3_InputRoom:
 327   2          case MP3_InputPsw:
 328   2          case MP3_Key:
 329   2            PlyN = 4;
 330   2            break;
 331   2          case MP3_SetOK:
 332   2            PlyN = 0;
 333   2            break;
 334   2          case MP3_Unlock:
 335   2            PlyN = 2;
 336   2            break;
 337   2          case MP3_RoomErr:
 338   2          case MP3_PwdErr:
 339   2          case MP3_CardErr:
 340   2          case MP3_Noresponse:
 341   2            PlyN = 1;
 342   2            break;
 343   2          case MP3_Huangup:
 344   2          case MP3_Ring:
 345   2            PlyN = 3;
 346   2            break;
 347   2        }
 348   1        
 349   1        BeepPlyIdx = 0;
 350   1        PwmTimer = 99;
 351   1        KeyBeepTask();
 352   1        KeyBeepO = 1;
 353   1      }
 354          
 355          void KeyBeepTask(void)
 356          {
 357   1        if(BeepPlyIdx != 0xFF)
 358   1        {
 359   2          if(++PwmTimer == 100)
 360   2          {
 361   3            PwmTimer = 0;
 362   3            if(BeepPlyIdx >= WavCode[PlyN].Len)
C51 COMPILER V9.57.0.0   AUDIO                                                             06/09/2022 11:28:17 PAGE 7   

 363   3            {
 364   4              BeepPlyIdx = 0xFF;
 365   4              KeyBeepO = 0;
 366   4              P62 = 0;
 367   4              return;
 368   4            }
 369   3            KeyBeepO = 1;
 370   3            BeepPlyIdx++;
 371   3          }
 372   2        }
 373   1      }
 374          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    933    ----
   CONSTANT SIZE    =     55    ----
   XDATA SIZE       =   2206      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
