C51 COMPILER V9.57.0.0   EEPROM                                                            06/06/2022 10:51:44 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\Eeprom.obj
COMPILER INVOKED BY: D:\keil-c51\C51\BIN\C51.EXE UserSrc\Eeprom.c LARGE OPTIMIZE(8,SPEED) BROWSE NOINTPROMOTE INCDIR(.\U
                    -serSrc;.\StcLib;.\UserSrc\ENG) DEBUG OBJECTEXTEND PRINT(.\Listings\Eeprom.lst) TABS(2) OBJECT(.\Objects\Eeprom.obj)

line level    source

   1          #include "Driver.h"
   2          
   3          #define write_c02 0xa0
   4          #define read_c02 0xa1
   5          #define EEPROM_PAGESIZE 64
   6          
   7          #define IIC_delay() {_nop_();_nop_();_nop_();_nop_();_nop_();}
   8          //void IIC_delay()
   9          //{
  10          //  u16 i=1;
  11          //  while(i--)_nop_();
  12          //}
  13          void IIC_delayms(uint8_t t)
  14          {
  15   1        uint8_t j;
  16   1        while(t--)
  17   1          for(j=0;j<110;j++);
  18   1      } 
  19          void IIC_start() //启动i2c
  20          {
  21   1        IIC_DAT_H;
  22   1        IIC_delay();
  23   1        IIC_CLK_H;
  24   1        IIC_delay();
  25   1        IIC_DAT_L;
  26   1        IIC_delay();
  27   1      }
  28          
  29          void IIC_stop() //停止i2c
  30          {
  31   1        IIC_DAT_L;
  32   1        IIC_delay();
  33   1        IIC_CLK_H;
  34   1        IIC_delay();
  35   1        IIC_DAT_H; //在scl为高电平时，sdasda一个上升沿为停止信号
  36   1        IIC_delay();
  37   1      }
  38          //ack:
  39          void IIC_ack() //应答信号0
  40          {
  41   1        uint8_t i = 0; //等待变量
  42   1        IIC_CLK_H;
  43   1        IIC_delay();
  44   1        while((IIC_DAT == 1) && i < 250)i++;//等待一段时间//若为应答0即退出，从机向主机发送应答信号
  45   1        IIC_CLK_L; //应答之后将scl拉低
  46   1        IIC_delay();
  47   1      }
  48          //nack:
  49          void IIC_nack() //非应答
  50          {
  51   1        IIC_DAT_H;
  52   1        IIC_CLK_L;//在scl为高电平期间，由主机向从机发送一个1，非应答信号
  53   1        IIC_delay();
  54   1        IIC_CLK_H; //应答之后将scl拉低
C51 COMPILER V9.57.0.0   EEPROM                                                            06/06/2022 10:51:44 PAGE 2   

  55   1        IIC_delay();
  56   1        IIC_CLK_L;
  57   1        IIC_DAT_L;
  58   1      }
  59          
  60          void IIC_Aack() //应答
  61          {
  62   1        IIC_DAT_L;
  63   1        IIC_CLK_L;//在scl为高电平期间，由主机向从机发送一个1，非应答信号
  64   1        IIC_delay();
  65   1        IIC_CLK_H; //应答之后将scl拉低
  66   1        IIC_delay();
  67   1        IIC_CLK_L;
  68   1      }
  69          
  70          
  71          //send byte:
  72          void IIC_send_byte(uint8_t date)//写一个字节
  73          {
  74   1        uint8_t i, temp;
  75   1        temp = date; //存入要写入的数据，即要发送到sda上的数据
  76   1        for(i = 0; i < 8; i++)
  77   1        { //发送8位
  78   2          IIC_CLK_L;
  79   2          IIC_delay();
  80   2          IIC_DAT = ((temp&0x80)==0x80)?1:0;
  81   2          temp <<= 1;
  82   2          IIC_delay();
  83   2          IIC_CLK_H; //在scl为高电平时，不允许sda上的数据变化，使数据稳定
  84   2          IIC_delay();
  85   2          IIC_CLK_L;
  86   2        }
  87   1        IIC_CLK_L;
  88   1        IIC_delay();
  89   1        IIC_DAT_H;
  90   1        IIC_delay();
  91   1      
  92   1        //IIC_ack();
  93   1      }
  94          //read: byte
  95          uint8_t IIC_read_byte() //读一个字节数据
  96          {
  97   1        uint8_t i,k;
  98   1        IIC_CLK_L;
  99   1        IIC_delay();
 100   1        IIC_DAT_H; //允许sda变化
 101   1        IIC_delay(); //使sda数据稳定后开始读数据
 102   1        for(i = 0; i < 8; i++)
 103   1        {
 104   2          IIC_CLK_H;
 105   2          IIC_delay();
 106   2          k <<= 1;
 107   2          k |= IIC_DAT;
 108   2          IIC_CLK_L;
 109   2          IIC_delay();
 110   2        }
 111   1        return k;//返回读出的数据
 112   1      }
 113          //write:at24c02  在at24c02中的指定地址写入数据
 114          //void write_at24c02(u16 address, u8 date)
 115          //{
 116          //  IIC_WP_L;
C51 COMPILER V9.57.0.0   EEPROM                                                            06/06/2022 10:51:44 PAGE 3   

 117          //  IIC_delay();
 118          //  IIC_start(); //启动i2c
 119          //  IIC_send_byte(write_c02);//写入期间地址和写操作
 120          //  IIC_ack(); //从机应答0
 121          //  IIC_send_byte((address>>8)&0xFF); //写入写数据的单元地址
 122          //  IIC_ack();
 123          //  IIC_send_byte(address&0xFF); //写入写数据的单元地址
 124          //  IIC_ack(); //ack0
 125          //  IIC_send_byte(date); //在指定地址中写入数据
 126          //  IIC_ack(); //从机应答0
 127          //  IIC_stop();    //停止i2c
 128          //  //IIC_Wp_H;
 129          //}
 130          ////read: at24c02   在at24c02的指定地址中读出写入的数据
 131          //u8 read_at24c02(u16 address)
 132          //{
 133          //  u8 dat;//用来存储读出的数据
 134          //  IIC_start(); //启动i2c
 135          //  IIC_send_byte(write_c02); //写入at24c02器件地址和写操作
 136          //  IIC_ack(); //从机应答0
 137          //  IIC_send_byte((address>>8)&0xFF);
 138          //  IIC_ack(); 
 139          //  IIC_send_byte(address&0xFF);
 140          //  IIC_ack(); //从机应答0
 141          //  IIC_start();  //再次启动i2c
 142          //  IIC_send_byte(read_c02); //写入AT24C02器件地址和读操作
 143          //  IIC_ack();//从机应答‘0’
 144          //  dat = IIC_read_byte();//读出指定地址中的数据
 145          //  //IIC_nack(); //主机发出非应答‘1’
 146          //  IIC_stop();  //停止i2c
 147          // return dat;    //返回读出的数据
 148          //}
 149          
 150          void writeBuf_at24c02(uint16_t address, uint8_t *buf,uint16_t len)
 151          {
 152   1        IIC_WP_L;
 153   1        IIC_start(); //启动i2c
 154   1        IIC_send_byte(write_c02);//写入期间地址和写操作
 155   1        IIC_ack();
 156   1        IIC_send_byte((address>>8)&0xFF);
 157   1        IIC_ack();
 158   1        IIC_send_byte(address&0xFF);
 159   1        IIC_ack();
 160   1        while(len--)
 161   1        {
 162   2          IIC_send_byte(*buf++); //在指定地址中写入数据
 163   2          IIC_ack();
 164   2          address++;
 165   2          if(((address%EEPROM_PAGESIZE) == 0) && (len > 0))
 166   2          {
 167   3            IIC_stop();
 168   3            IIC_delayms(100);
 169   3            IIC_start(); //启动i2c
 170   3            IIC_send_byte(write_c02);//写入期间地址和写操作
 171   3            IIC_ack();
 172   3            IIC_send_byte((address>>8)&0xFF);
 173   3            IIC_ack();
 174   3            IIC_send_byte(address&0xFF);
 175   3            IIC_ack();
 176   3          }
 177   2        }
 178   1        IIC_stop();    //停止i2c
C51 COMPILER V9.57.0.0   EEPROM                                                            06/06/2022 10:51:44 PAGE 4   

 179   1        IIC_delayms(100);
 180   1      }
 181          
 182          uint8_t readBuf_at24c02(uint16_t address, uint8_t *buf,uint16_t len)
 183          {
 184   1        uint8_t dat;//用来存储读出的数据
 185   1        IIC_start(); //启动i2c
 186   1        IIC_send_byte(write_c02); //写入at24c02器件地址和写操作
 187   1        IIC_ack();
 188   1        IIC_send_byte((address>>8)&0xFF);
 189   1        IIC_ack();
 190   1        IIC_send_byte(address&0xFF);
 191   1        IIC_ack();
 192   1        IIC_start();  //再次启动i2c
 193   1        IIC_send_byte(read_c02); //写入AT24C02器件地址和读操作
 194   1        IIC_ack();
 195   1        while(len>1)
 196   1        {
 197   2          len--;
 198   2          *buf = IIC_read_byte();//读出指定地址中的数据
 199   2          IIC_Aack();
 200   2          buf++;
 201   2        }
 202   1        *buf = IIC_read_byte();//读出指定地址中的数据
 203   1        IIC_nack(); //主机发出非应答‘1’
 204   1        IIC_stop();  //停止i2c
 205   1       return dat;    //返回读出的数据
 206   1      }
 207          
 208          //#include "stdio.h"
 209          //#define CNT 400
 210          //void EepromTest(void)
 211          //{
 212          //  u16 i;
 213          //  u8 c;
 214          //  u8 buf[CNT];
 215          
 216          //  readBuf_at24c02(0,buf,CNT);
 217          //  for(i=0;i<CNT;i++)
 218          //  {
 219          //    printf("%bu,",buf[i]);
 220          //    buf[i] = i;
 221          //    //buf[i] += 10;
 222          //    delay(1);
 223          //  }
 224          //  printf("\r\n\r\n");
 225          //  writeBuf_at24c02(0,buf,CNT);
 226          //  readBuf_at24c02(0,buf,CNT);
 227          //  for(i=0;i<CNT;i++)
 228          //  {
 229          //    //printf("%u - %bu, \r\n",i,buf[i]);
 230          //    printf("%bu,",buf[i]);
 231          //    delay(1);
 232          //  }
 233          //  printf("\r\n");
 234          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    480    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      15
C51 COMPILER V9.57.0.0   EEPROM                                                            06/06/2022 10:51:44 PAGE 5   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
