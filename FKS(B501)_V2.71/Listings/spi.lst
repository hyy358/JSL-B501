C51 COMPILER V9.57.0.0   SPI                                                               06/06/2022 10:51:45 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN .\Objects\spi.obj
COMPILER INVOKED BY: D:\keil-c51\C51\BIN\C51.EXE StcLib\spi.c LARGE OPTIMIZE(8,SPEED) BROWSE NOINTPROMOTE INCDIR(.\UserS
                    -rc;.\StcLib;.\UserSrc\ENG) DEBUG OBJECTEXTEND PRINT(.\Listings\spi.lst) TABS(2) OBJECT(.\Objects\spi.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include  "spi.h"
  14          #include  "Driver.h"
  15          
  16          u8  SPI_RxCnt;
  17          u8  SPI_RxTimerOut;
  18          u8  SPI_BUF_type SPI_RxBuffer[SPI_BUF_LENTH];
  19          bit B_SPI_Busy; //发送忙标志
  20          
  21          
  22          //========================================================================
  23          // 函数: void SPI_Init(SPI_InitTypeDef *SPIx)
  24          // 描述: SPI初始化程序.
  25          // 参数: SPIx: 结构参数,请参考spi.h里的定义.
  26          // 返回: none.
  27          // 版本: V1.0, 2012-11-22
  28          //========================================================================
  29          void SPI_Init(SPI_InitTypeDef *SPIx)
  30          {
  31   1        if(SPIx->SPI_SSIG == ENABLE)      SPCTL &= ~(1<<7); //enable SS, conform Master or Slave by SS pin.
  32   1        else                  SPCTL |=  (1<<7); //disable SS, conform Master or Slave by SPI_Mode
  33   1        if(SPIx->SPI_Module == ENABLE)      SPCTL |=  (1<<6); //SPI enable
  34   1        else                  SPCTL &= ~(1<<6); //SPI disable
  35   1        if(SPIx->SPI_FirstBit == SPI_LSB)   SPCTL |= ~(1<<5); //LSB first
  36   1        else                  SPCTL &= ~(1<<5); //MSB first
  37   1        if(SPIx->SPI_Mode == SPI_Mode_Slave)  SPCTL &= ~(1<<4); //slave
  38   1        else                  SPCTL |=  (1<<4); //master
  39   1        if(SPIx->SPI_CPOL == SPI_CPOL_High)   SPCTL |=  (1<<3); //SCLK Idle High, Low Active.
  40   1        else                  SPCTL &= ~(1<<3); //SCLK Idle Low, High Active.
  41   1        if(SPIx->SPI_CPHA == SPI_CPHA_2Edge)  SPCTL |=  (1<<2); //sample at the second edge
  42   1        else                  SPCTL &= ~(1<<2); //sample at the first  edge
  43   1        if(SPIx->SPI_Interrupt == ENABLE)   IE2 |=  (1<<1);
  44   1        else                  IE2 &= ~(1<<1);
  45   1        SPCTL = (SPCTL & ~3) | (SPIx->SPI_Speed & 3);         //set speed
  46   1        P_SW1 = (P_SW1 & ~(3<<2)) | SPIx->SPI_IoUse;
  47   1        
  48   1        SPI_RxTimerOut = 0;
  49   1        B_SPI_Busy = 0;
  50   1      }
  51          
  52          //========================================================================
  53          // 函数: void SPI_SetMode(u8 mode)
  54          // 描述: SPI设置主从模式函数.
C51 COMPILER V9.57.0.0   SPI                                                               06/06/2022 10:51:45 PAGE 2   

  55          // 参数: mode: 指定模式, 取值 SPI_Mode_Master 或 SPI_Mode_Slave.
  56          // 返回: none.
  57          // 版本: V1.0, 2012-11-22
  58          //========================================================================
  59          //void SPI_SetMode(u8 mode)
  60          //{
  61          //  if(mode == SPI_Mode_Slave)
  62          //  {
  63          //    SPCTL &= ~(1<<4); //重新设置为从机待机
  64          //    SPCTL &= ~(1<<7); //SS引脚确定主从
  65          //  }
  66          //  else
  67          //  {
  68          //    SPCTL |= (1<<4);  //使能 SPI 主机模式
  69          //    SPCTL |= (1<<7);  //忽略SS引脚功能
  70          //  }
  71          //}
  72          
  73          
  74          //========================================================================
  75          // 函数: void SPI_WriteByte(u8 dat)
  76          // 描述: SPI发送一个字节数据.
  77          // 参数: dat: 要发送的值.
  78          // 返回: none.
  79          // 版本: V1.0, 2020-09-14
  80          //========================================================================
  81          //void SPI_WriteByte(u8 dat)    //SPI发送一个字节数据
  82          //{
  83          //  SPDAT = dat;
  84          //  B_SPI_Busy = 1;
  85          //  while(B_SPI_Busy) ;
  86          //}
  87          
  88          
  89          //========================================================================
  90          // 函数: void SPI_Transivion (void) interrupt SPI_VECTOR
  91          // 描述: SPI中断函数.
  92          // 参数: none.
  93          // 返回: none.
  94          // 版本: V1.0, 2012-11-22
  95          //========================================================================
  96          void SPI_Transivion (void) interrupt SPI_VECTOR
  97          {
  98   1        if(SPCTL & 0x10)  //主机模式
  99   1        {
 100   2          B_SPI_Busy = 0;
 101   2        }
 102   1        else              //从机模式
 103   1        {
 104   2          if(SPI_RxCnt >= SPI_BUF_LENTH)    SPI_RxCnt = 0;
 105   2          SPI_RxBuffer[SPI_RxCnt++] = SPDAT;
 106   2          SPI_RxTimerOut = 5;
 107   2        }
 108   1        SPSTAT = SPIF + WCOL; //清0 SPIF和WCOL标志
 109   1      }
 110          
 111          u8 SPI_ReadWriteByte(u8 dat)    //SPI发送一个字节数据
 112          {
 113   1        SPDAT = dat;
 114   1        B_SPI_Busy = 1;
 115   1        while(B_SPI_Busy);
 116   1        dat = SPDAT;
C51 COMPILER V9.57.0.0   SPI                                                               06/06/2022 10:51:45 PAGE 3   

 117   1        return dat;
 118   1      }
 119          
 120          //指令表
 121          //#define W25X_WriteEnable    0x06 
 122          //#define W25X_WriteDisable   0x04 
 123          //#define W25X_ReadStatusReg    0x05 
 124          //#define W25X_WriteStatusReg   0x01 
 125          //#define W25X_ReadData     0x03 
 126          //#define W25X_FastReadData   0x0B 
 127          //#define W25X_FastReadDual   0x3B 
 128          //#define W25X_PageProgram    0x02 
 129          //#define W25X_BlockErase     0xD8 
 130          //#define W25X_SectorErase    0x20 
 131          //#define W25X_ChipErase      0xC7 
 132          //#define W25X_PowerDown      0xB9 
 133          //#define W25X_ReleasePowerDown 0xAB 
 134          //#define W25X_DeviceID     0xAB 
 135          //#define W25X_ManufactDeviceID 0x90 
 136          //#define W25X_JedecDeviceID    0x9F 
 137          
 138          #include "SysStatus.h"
 139          void SPI_Flash_Read(u8* pBuffer,u32 ReadAddr,u16 NumByteToRead)   
 140          { 
 141   1        u16 i,tmp;                                
 142   1        SPI_FLASH_CS_EN;                            //使能器件   
 143   1        delay(10);
 144   1          SPI_ReadWriteByte(0x03);         //发送读取命令   
 145   1          SPI_ReadWriteByte((u8)((ReadAddr)>>16));  //发送24bit地址    
 146   1          SPI_ReadWriteByte((u8)((ReadAddr)>>8));   
 147   1          SPI_ReadWriteByte((u8)ReadAddr);   
 148   1          for(i=0;i<NumByteToRead;i++)
 149   1        { 
 150   2              //pBuffer[i] = SPI_ReadWriteByte(0XFF);   //循环读数  
 151   2          tmp = SPI_ReadWriteByte(0XFF);   //循环读数  
 152   2          pBuffer[i] = (tmp*Volum)/5;
 153   2          }
 154   1        SPI_FLASH_CS_DISEN;                            //取消片选             
 155   1      }
 156          
 157          //u16 SPI_Flash_ReadID(void)
 158          //{
 159          //  u16 Temp = 0;   
 160          //  SPI_FLASH_CS_EN;            
 161          //  SPI_ReadWriteByte(0x90);//发送读取ID命令      
 162          //  SPI_ReadWriteByte(0x00);      
 163          //  SPI_ReadWriteByte(0x00);      
 164          //  SPI_ReadWriteByte(0x00);           
 165          //  Temp|=SPI_ReadWriteByte(0xFF)<<8;  
 166          //  Temp|=SPI_ReadWriteByte(0xFF);   
 167          //  SPI_FLASH_CS_DISEN;           
 168          //  return Temp;
 169          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    405    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    130      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.57.0.0   SPI                                                               06/06/2022 10:51:45 PAGE 4   

   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
