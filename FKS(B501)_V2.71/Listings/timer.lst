C51 COMPILER V9.60.0.0   TIMER                                                             11/01/2021 15:13:58 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Objects\timer.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE StcLib\timer.c LARGE OPTIMIZE(8,SPEED) BROWSE NOINTPROMOTE INCDIR(.\User
                    -Src;.\StcLib;.\UserSrc\ENG) DEBUG OBJECTEXTEND PRINT(.\Listings\timer.lst) OBJECT(.\Objects\timer.obj)

line level    source

   1          #include "timer.h"
   2          #include "RfidCard.h"
   3          #include "Driver.h"
   4          #include "Audio.h"
   5          
   6          #ifdef Timer0
   7          bit Timer0_Irq = false;
   8          u8 usTime;
   9          /********************* Timer0中断函数************************/
  10          void timer0_int (void) interrupt TIMER0_VECTOR
  11          {
  12   1              Timer0_Irq = true;
  13   1      
  14   1      #ifdef PWM_BEEP
                      PWMtask();
              #endif
  17   1      #ifdef KEY_BEEP
  18   1              KeyBeepTask();
  19   1      #endif
  20   1      #ifdef PWM_RING
  21   1              RingTask();
  22   1      #endif
  23   1      }
  24          #endif
  25          #ifdef Timer1
  26          /********************* Timer1中断函数************************/
  27          void timer1_int (void) interrupt TIMER1_VECTOR
  28          {
  29   1         CardRt++;
  30   1      
  31   1              if(++usTime >= 25)
  32   1              {
  33   2                      usTime = 0;
  34   2      #ifdef KEY_BEEP 
  35   2                      P60 ^= KeyBeepO;
  36   2      #endif
  37   2      
  38   2              }
  39   1      
  40   1      }
  41          #endif
  42          #ifdef Timer2
              /********************* Timer2中断函数************************/
              void timer2_int (void) interrupt TIMER2_VECTOR
              {
              
              }
              #endif
  49          #ifdef Timer3
              /********************* Timer3中断函数************************/
              void timer3_int (void) interrupt TIMER3_VECTOR
              {
              
              }
C51 COMPILER V9.60.0.0   TIMER                                                             11/01/2021 15:13:58 PAGE 2   

              #endif
  56          #ifdef Timer4
  57          u8 t4u = 0;
  58          /********************* Timer4中断函数************************/
  59          void timer4_int (void) interrupt TIMER4_VECTOR
  60          {
  61   1      #ifdef PWM_AUDIO
  62   1              PWMtask();
  63   1      #endif
  64   1      #ifdef PWM_RING
  65   1              if((RingO > 0) && (++t4u >= RingO))
  66   1              {
  67   2                      t4u = 0;
  68   2                      P63 ^= 1;
  69   2              }
  70   1      #endif
  71   1      }
  72          #endif
  73          
  74          //========================================================================
  75          // 函数: u8     Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  76          // 描述: 定时器初始化程序.
  77          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
  78          // 返回: 成功返回0, 空操作返回1,错误返回2.
  79          // 版本: V1.0, 2012-10-22
  80          //========================================================================
  81          u8      Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  82          {
  83   1      #ifdef Timer0
  84   1              if(TIM == Timer0)
  85   1              {
  86   2                      Timer0_Stop();          //停止计数
  87   2                      if(TIMx->TIM_Interrupt == ENABLE)               Timer0_InterruptEnable();       //允许中断
  88   2                      else            Timer0_InterruptDisable();      //禁止中断
  89   2                      if(TIMx->TIM_Polity > Polity_3) return 2;       //错误
  90   2                      Timer0_Polity(TIMx->TIM_Polity);        //指定中断优先级(低到高) Polity_0,Polity_1,Polity_2,Polity_3
  91   2      
  92   2                      if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2;       //错误
  93   2                      TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
  94   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        Timer0_12T();   //12T
  95   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         Timer0_1T();    //1T
  96   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        Timer0_AsCounter();     //对外计数或分频
  97   2                      else            Timer0_AsTimer();       //定时
  98   2                      if(TIMx->TIM_ClkOut == ENABLE)  Timer0_CLKO_Enable();   //输出时钟
  99   2                      else            Timer0_CLKO_Disable();  //不输出时钟
 100   2                      
 101   2                      T0_Load(TIMx->TIM_Value);
 102   2                      if(TIMx->TIM_Run == ENABLE)     Timer0_Run();   //开始运行
 103   2                      return  0;              //成功
 104   2              }
 105   1      #endif
 106   1      #ifdef Timer1
 107   1              if(TIM == Timer1)
 108   1              {
 109   2                      Timer1_Stop();          //停止计数
 110   2                      if(TIMx->TIM_Interrupt == ENABLE)               Timer1_InterruptEnable();       //允许中断
 111   2                      else            Timer1_InterruptDisable();      //禁止中断
 112   2                      if(TIMx->TIM_Polity > Polity_3) return 2;       //错误
 113   2                      Timer1_Polity(TIMx->TIM_Polity);        //指定中断优先级(低到高) Polity_0,Polity_1,Polity_2,Polity_3
 114   2                      if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2;       //错误
 115   2                      TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 116   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        Timer1_12T();   //12T
C51 COMPILER V9.60.0.0   TIMER                                                             11/01/2021 15:13:58 PAGE 3   

 117   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         Timer1_1T();    //1T
 118   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        Timer1_AsCounter();     //对外计数或分频
 119   2                      else            Timer1_AsTimer();       //定时
 120   2                      if(TIMx->TIM_ClkOut == ENABLE)  Timer1_CLKO_Enable();   //输出时钟
 121   2                      else            Timer1_CLKO_Disable();  //不输出时钟
 122   2                      
 123   2                      T1_Load(TIMx->TIM_Value);
 124   2                      if(TIMx->TIM_Run == ENABLE)     Timer1_Run();   //开始运行
 125   2                      return  0;              //成功
 126   2              }
 127   1      #endif
 128   1      #ifdef Timer2
                      if(TIM == Timer2)               //Timer2,固定为16位自动重装, 中断无优先级
                      {
                              Timer2_Stop();  //停止计数
                              if(TIMx->TIM_Interrupt == ENABLE)               Timer2_InterruptEnable();       //允许中断
                              else            Timer2_InterruptDisable();      //禁止中断
                              if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)        return 2;
                              if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        Timer2_12T();   //12T
                              if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         Timer2_1T();    //1T
                              if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        Timer2_AsCounter();     //对外计数或分频
                              else            Timer2_AsTimer();               //定时
                              if(TIMx->TIM_ClkOut == ENABLE)  Timer2_CLKO_Enable();           //输出时钟
                              else            Timer2_CLKO_Disable();  //不输出时钟
              
                              T2_Load(TIMx->TIM_Value);
                              if(TIMx->TIM_Run == ENABLE)     Timer2_Run();   //开始运行
                              return  0;              //成功
                      }
              #endif
 147   1      #ifdef Timer3
                      if(TIM == Timer3)               //Timer3,固定为16位自动重装, 中断无优先级
                      {
                              Timer3_Stop();  //停止计数
                              if(TIMx->TIM_Interrupt == ENABLE)               Timer3_InterruptEnable();       //允许中断
                              else            Timer3_InterruptDisable();      //禁止中断
                              if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)        return 2;
                              if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        Timer3_12T();   //12T
                              if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         Timer3_1T();    //1T
                              if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        Timer3_AsCounter();     //对外计数或分频
                              else            Timer3_AsTimer();               //定时
                              if(TIMx->TIM_ClkOut == ENABLE)  Timer3_CLKO_Enable();           //输出时钟
                              else            Timer3_CLKO_Disable();  //不输出时钟
              
                              T3_Load(TIMx->TIM_Value);
                              if(TIMx->TIM_Run == ENABLE)     Timer3_Run();   //开始运行
                              return  0;              //成功
                      }
              #endif
 166   1      #ifdef Timer4
 167   1              if(TIM == Timer4)               //Timer3,固定为16位自动重装, 中断无优先级
 168   1              {
 169   2                      Timer4_Stop();  //停止计数
 170   2                      if(TIMx->TIM_Interrupt == ENABLE)               Timer4_InterruptEnable();       //允许中断
 171   2                      else            Timer4_InterruptDisable();      //禁止中断
 172   2                      if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)        return 2;
 173   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        Timer4_12T();   //12T
 174   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         Timer4_1T();    //1T
 175   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        Timer4_AsCounter();     //对外计数或分频
 176   2                      else            Timer4_AsTimer();               //定时
 177   2                      if(TIMx->TIM_ClkOut == ENABLE)  Timer4_CLKO_Enable();           //输出时钟
 178   2                      else            Timer4_CLKO_Disable();  //不输出时钟
C51 COMPILER V9.60.0.0   TIMER                                                             11/01/2021 15:13:58 PAGE 4   

 179   2      
 180   2                      T4_Load(TIMx->TIM_Value);
 181   2                      if(TIMx->TIM_Run == ENABLE)     Timer4_Run();   //开始运行
 182   2                      return  0;              //成功
 183   2              }
 184   1      #endif
 185   1              return 2;       //错误
 186   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    742    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
